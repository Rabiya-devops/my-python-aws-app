version: 0.2

# --- ENVIRONMENT VARIABLES (Pulling secrets from Parameter Store) ---
env:
  # This section pulls your secrets securely from AWS Systems Manager Parameter Store
  parameter-store:
    # IMPORTANT: Ensure these parameter names match exactly what you created in SSM
    DOCKER_REGISTRY_USERNAME: /myapp/docker-credentials/username
    DOCKER_REGISTRY_PASSWORD: /myapp/docker-credentials/password
    DOCKER_REGISTRY_URL: /myapp/docker-registry/url  # Should contain the value 'docker.io'

phases:
  # --- INSTALL PHASE ---
  install:
    runtime-versions:
      python: 3.11
      # Docker is pre-installed in standard CodeBuild images

  # --- PRE-BUILD PHASE ---
  pre_build:
    commands:
      # Install dependencies from the requirements.txt file at the root
      - echo "Installing Python dependencies..."
      - pip install -r requirements.txt
      - echo "Starting Docker build process."

  # --- BUILD PHASE ---
  build:
    commands:
      # 1. Login to Docker Hub using the retrieved credentials
      # The command is enclosed in double quotes ("") for better safety with special characters/variables.
      - echo "$DOCKER_REGISTRY_PASSWORD" | docker login -u "$DOCKER_REGISTRY_USERNAME" --password-stdin "$DOCKER_REGISTRY_URL"

      # 2. Define the image name variable
      # This creates the full image path: docker.io/YOUR_USERNAME/simple-python-flask-app:UNIQUE_TAG
      - IMAGE_REPO_NAME="$DOCKER_REGISTRY_URL/$DOCKER_REGISTRY_USERNAME/simple-python-flask-app"
      - IMAGE_TAG="$IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION"
      - IMAGE_TAG_LATEST="$IMAGE_REPO_NAME:latest"

      # 3. Build the Docker image ('.' tells it to use the Dockerfile in the current directory)
      - echo "Building Docker image with unique tag: $IMAGE_TAG"
      - docker build -t $IMAGE_TAG .

      # 4. Tag the image with the 'latest' tag
      - docker tag $IMAGE_TAG $IMAGE_TAG_LATEST

      # 5. Push both the unique-tagged and 'latest' images to Docker Hub
      - echo "Pushing image to Docker Hub..."
      - docker push $IMAGE_TAG
      - docker push $IMAGE_TAG_LATEST

  # --- POST-BUILD PHASE ---
  post_build:
    commands:
      # 6. Create the imagedefinitions.json file for CodeDeploy
      # This file tells the deployment system which image and container name to use
      - echo "Creating imagedefinitions.json file..."
      - printf '[{"name":"my-python-app-container","imageUri":"%s"}]' $IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json
      - echo "Build and Push to Docker Hub completed successfully!"

# --- ARTIFACTS ---
artifacts:
  files:
    # These are the files CodeDeploy needs to perform the deployment on the EC2 instance
    - appspec.yml
    - start_container.sh
    - stop_container.sh
    - imagedefinitions.json 
  # All files are at the root, so no base-directory is needed
